#!/usr/bin/env python3
import requests
from cortexutils.analyzer import Analyzer

BASEURL = 'https://mb-api.abuse.ch/api/v1/'

class MalwareBazaarAnalyzer(Analyzer):
    def __init__(self):
        Analyzer.__init__(self)
        self.api_key = self.get_param("config.api_key", None)

    def run(self):
        data = self.get_data()
        if not data:
            self.error('No observable or file given.')

        results = {}
        if self.data_type == 'hash':
            if len(data) in [32, 40, 64]:
                headers = { 'API-KEY': self.api_key }
                data = {
                    'query': 'get_info',
                    'hash': data,
                }
                results = requests.post(BASEURL, data=data, timeout=15, headers=headers)

                if results.status_code == 200:
                    results = results.json()
                    if results['query_status'] in ['http_post_expected', 'illegal_hash', 'no_hash_provided']:
                        self.error('MalwareBazaar returned error: %s' % results['query_status'])
                    elif results['query_status'] != 'hash_not_found':
                        results['data'] = results['data'][0]
            else:
                self.error('Only sha256, sha1 and md5 supported by MalwareBazaar.')
        else:
            self.error('Datatype not supported.')

        self.report(results)

    def summary(self, raw):
        taxonomies = []
        namespace = "MalwareBazaar"

        if raw['query_status'] == 'hash_not_found':
            taxonomies.append(self.build_taxonomy(
                'info',
                namespace,
                'Search',
                'No results'
            ))
        else:
            taxonomies.append(self.build_taxonomy(
                'malicious',
                namespace,
                'Signature',
                raw['data'].get('signature', 'Unknown')
            ))
        return {"taxonomies": taxonomies}


if __name__ == '__main__':
    MalwareBazaarAnalyzer().run()
