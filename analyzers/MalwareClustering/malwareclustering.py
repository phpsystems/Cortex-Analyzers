#!/usr/bin/env python3
# encoding: utf-8
import time
import hashlib

from malwareclustering_api import Api
from cortexutils.analyzer import Analyzer


try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO


class MalwareClusteringAnalyzer(Analyzer):

    def __init__(self):
        Analyzer.__init__(self)
        self.service = self.get_param('config.service', None, 'Service parameter is missing')
        self.n4j_host = self.get_param('config.n4j_host', None, 'Missing Neo4J Host')
        self.n4j_port = self.get_param('config.n4j_port', None, 'Missing Neo4J Port')
        self.n4j_user = self.get_param('config.n4j_user', None, 'Missing Neo4J User')
        self.n4j_password = self.get_param('config.n4j_pwd', None, 'Missing Neo4J Password')
        self.threshold = self.get_param('config.threshold', None, 'Missing ApiScout Threshold')
        self.polling_interval = self.get_param('config.polling_interval', 60)
        self.n4j_api = Api(self.n4j_host,self.n4j_port,self.n4j_user,self.n4j_password,self.threshold)

    def summary(self, raw):
        taxonomies = []
        namespace = "MalwareClustering"
        predicate = "Family"
        score = -1

        result = { "has_result": True }   

        value = raw.get('info', {}).get('tag', None) if raw.get('info', {}) else None
                
        if not value:
            top_family = max([(x['tag'], x['max']) for x in raw.get('families', [])], key = lambda x: x[1]) if raw.get('families', None) else None
        
            if top_family:
                (value, score) = top_family
                if score > 70:
                    level = "malicious"
                elif score > 40:
                    level = "suspicious"
            else:
                value = "No info"
                level = "info"
        else:
            level = "malicious"        

        taxonomies.append(self.build_taxonomy(level, namespace, predicate, value))
        return {"taxonomies": taxonomies}

    def run(self):
        if self.service == 'search':
            if self.data_type == 'file':
                filename = self.get_param('filename', 'noname.ext')
                filepath = self.get_param('file', None, 'File is missing')
                return self.report(self.n4j_api.process_file(filepath, filename))
            elif self.data_type == 'hash':
                data = self.get_param('data', None, 'Data is missing')
                return self.report(self.n4j_api.search_hash(data))
            else:
                self.error('Invalid data type')
        else:
            self.error('Invalid service')


if __name__ == '__main__':
    MalwareClusteringAnalyzer().run()
